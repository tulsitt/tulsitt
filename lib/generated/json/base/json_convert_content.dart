// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_base/model/game_model_entity.dart';
import 'package:flutter_base/generated/json/game_model_entity_helper.dart';
import 'package:flutter_base/model/error_model_entity.dart';
import 'package:flutter_base/generated/json/error_model_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case GameModelEntity:
				return gameModelEntityFromJson(data as GameModelEntity, json) as T;
			case GameModelResults:
				return gameModelResultsFromJson(data as GameModelResults, json) as T;
			case GameModelResultsPlatforms:
				return gameModelResultsPlatformsFromJson(data as GameModelResultsPlatforms, json) as T;
			case GameModelResultsPlatformsPlatform:
				return gameModelResultsPlatformsPlatformFromJson(data as GameModelResultsPlatformsPlatform, json) as T;
			case GameModelResultsStores:
				return gameModelResultsStoresFromJson(data as GameModelResultsStores, json) as T;
			case GameModelResultsStoresStore:
				return gameModelResultsStoresStoreFromJson(data as GameModelResultsStoresStore, json) as T;
			case GameModelResultsRatings:
				return gameModelResultsRatingsFromJson(data as GameModelResultsRatings, json) as T;
			case GameModelResultsAddedByStatus:
				return gameModelResultsAddedByStatusFromJson(data as GameModelResultsAddedByStatus, json) as T;
			case GameModelResultsTags:
				return gameModelResultsTagsFromJson(data as GameModelResultsTags, json) as T;
			case GameModelResultsEsrbRating:
				return gameModelResultsEsrbRatingFromJson(data as GameModelResultsEsrbRating, json) as T;
			case GameModelResultsShortScreenshots:
				return gameModelResultsShortScreenshotsFromJson(data as GameModelResultsShortScreenshots, json) as T;
			case GameModelResultsParentPlatforms:
				return gameModelResultsParentPlatformsFromJson(data as GameModelResultsParentPlatforms, json) as T;
			case GameModelResultsParentPlatformsPlatform:
				return gameModelResultsParentPlatformsPlatformFromJson(data as GameModelResultsParentPlatformsPlatform, json) as T;
			case GameModelResultsGenres:
				return gameModelResultsGenresFromJson(data as GameModelResultsGenres, json) as T;
			case ErrorModelEntity:
				return errorModelEntityFromJson(data as ErrorModelEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case GameModelEntity:
				return gameModelEntityToJson(data as GameModelEntity);
			case GameModelResults:
				return gameModelResultsToJson(data as GameModelResults);
			case GameModelResultsPlatforms:
				return gameModelResultsPlatformsToJson(data as GameModelResultsPlatforms);
			case GameModelResultsPlatformsPlatform:
				return gameModelResultsPlatformsPlatformToJson(data as GameModelResultsPlatformsPlatform);
			case GameModelResultsStores:
				return gameModelResultsStoresToJson(data as GameModelResultsStores);
			case GameModelResultsStoresStore:
				return gameModelResultsStoresStoreToJson(data as GameModelResultsStoresStore);
			case GameModelResultsRatings:
				return gameModelResultsRatingsToJson(data as GameModelResultsRatings);
			case GameModelResultsAddedByStatus:
				return gameModelResultsAddedByStatusToJson(data as GameModelResultsAddedByStatus);
			case GameModelResultsTags:
				return gameModelResultsTagsToJson(data as GameModelResultsTags);
			case GameModelResultsEsrbRating:
				return gameModelResultsEsrbRatingToJson(data as GameModelResultsEsrbRating);
			case GameModelResultsShortScreenshots:
				return gameModelResultsShortScreenshotsToJson(data as GameModelResultsShortScreenshots);
			case GameModelResultsParentPlatforms:
				return gameModelResultsParentPlatformsToJson(data as GameModelResultsParentPlatforms);
			case GameModelResultsParentPlatformsPlatform:
				return gameModelResultsParentPlatformsPlatformToJson(data as GameModelResultsParentPlatformsPlatform);
			case GameModelResultsGenres:
				return gameModelResultsGenresToJson(data as GameModelResultsGenres);
			case ErrorModelEntity:
				return errorModelEntityToJson(data as ErrorModelEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (GameModelEntity).toString()){
			return GameModelEntity().fromJson(json);
		}
		if(type == (GameModelResults).toString()){
			return GameModelResults().fromJson(json);
		}
		if(type == (GameModelResultsPlatforms).toString()){
			return GameModelResultsPlatforms().fromJson(json);
		}
		if(type == (GameModelResultsPlatformsPlatform).toString()){
			return GameModelResultsPlatformsPlatform().fromJson(json);
		}
		if(type == (GameModelResultsStores).toString()){
			return GameModelResultsStores().fromJson(json);
		}
		if(type == (GameModelResultsStoresStore).toString()){
			return GameModelResultsStoresStore().fromJson(json);
		}
		if(type == (GameModelResultsRatings).toString()){
			return GameModelResultsRatings().fromJson(json);
		}
		if(type == (GameModelResultsAddedByStatus).toString()){
			return GameModelResultsAddedByStatus().fromJson(json);
		}
		if(type == (GameModelResultsTags).toString()){
			return GameModelResultsTags().fromJson(json);
		}
		if(type == (GameModelResultsEsrbRating).toString()){
			return GameModelResultsEsrbRating().fromJson(json);
		}
		if(type == (GameModelResultsShortScreenshots).toString()){
			return GameModelResultsShortScreenshots().fromJson(json);
		}
		if(type == (GameModelResultsParentPlatforms).toString()){
			return GameModelResultsParentPlatforms().fromJson(json);
		}
		if(type == (GameModelResultsParentPlatformsPlatform).toString()){
			return GameModelResultsParentPlatformsPlatform().fromJson(json);
		}
		if(type == (GameModelResultsGenres).toString()){
			return GameModelResultsGenres().fromJson(json);
		}
		if(type == (ErrorModelEntity).toString()){
			return ErrorModelEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<GameModelEntity>[] is M){
			return data.map<GameModelEntity>((e) => GameModelEntity().fromJson(e)).toList() as M;
		}
		if(<GameModelResults>[] is M){
			return data.map<GameModelResults>((e) => GameModelResults().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsPlatforms>[] is M){
			return data.map<GameModelResultsPlatforms>((e) => GameModelResultsPlatforms().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsPlatformsPlatform>[] is M){
			return data.map<GameModelResultsPlatformsPlatform>((e) => GameModelResultsPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsStores>[] is M){
			return data.map<GameModelResultsStores>((e) => GameModelResultsStores().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsStoresStore>[] is M){
			return data.map<GameModelResultsStoresStore>((e) => GameModelResultsStoresStore().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsRatings>[] is M){
			return data.map<GameModelResultsRatings>((e) => GameModelResultsRatings().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsAddedByStatus>[] is M){
			return data.map<GameModelResultsAddedByStatus>((e) => GameModelResultsAddedByStatus().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsTags>[] is M){
			return data.map<GameModelResultsTags>((e) => GameModelResultsTags().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsEsrbRating>[] is M){
			return data.map<GameModelResultsEsrbRating>((e) => GameModelResultsEsrbRating().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsShortScreenshots>[] is M){
			return data.map<GameModelResultsShortScreenshots>((e) => GameModelResultsShortScreenshots().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsParentPlatforms>[] is M){
			return data.map<GameModelResultsParentPlatforms>((e) => GameModelResultsParentPlatforms().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsParentPlatformsPlatform>[] is M){
			return data.map<GameModelResultsParentPlatformsPlatform>((e) => GameModelResultsParentPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsGenres>[] is M){
			return data.map<GameModelResultsGenres>((e) => GameModelResultsGenres().fromJson(e)).toList() as M;
		}
		if(<ErrorModelEntity>[] is M){
			return data.map<ErrorModelEntity>((e) => ErrorModelEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}