// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_base/model/details_model_entity.dart';
import 'package:flutter_base/generated/json/details_model_entity_helper.dart';
import 'package:flutter_base/model/game_model_entity.dart';
import 'package:flutter_base/generated/json/game_model_entity_helper.dart';
import 'package:flutter_base/model/error_model_entity.dart';
import 'package:flutter_base/generated/json/error_model_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case DetailsModelEntity:
				return detailsModelEntityFromJson(data as DetailsModelEntity, json) as T;
			case DetailsModelMetacriticPlatforms:
				return detailsModelMetacriticPlatformsFromJson(data as DetailsModelMetacriticPlatforms, json) as T;
			case DetailsModelMetacriticPlatformsPlatform:
				return detailsModelMetacriticPlatformsPlatformFromJson(data as DetailsModelMetacriticPlatformsPlatform, json) as T;
			case DetailsModelRatings:
				return detailsModelRatingsFromJson(data as DetailsModelRatings, json) as T;
			case DetailsModelReactions:
				return detailsModelReactionsFromJson(data as DetailsModelReactions, json) as T;
			case DetailsModelAddedByStatus:
				return detailsModelAddedByStatusFromJson(data as DetailsModelAddedByStatus, json) as T;
			case DetailsModelParentPlatforms:
				return detailsModelParentPlatformsFromJson(data as DetailsModelParentPlatforms, json) as T;
			case DetailsModelParentPlatformsPlatform:
				return detailsModelParentPlatformsPlatformFromJson(data as DetailsModelParentPlatformsPlatform, json) as T;
			case DetailsModelPlatforms:
				return detailsModelPlatformsFromJson(data as DetailsModelPlatforms, json) as T;
			case DetailsModelPlatformsPlatform:
				return detailsModelPlatformsPlatformFromJson(data as DetailsModelPlatformsPlatform, json) as T;
			case DetailsModelPlatformsRequirements:
				return detailsModelPlatformsRequirementsFromJson(data as DetailsModelPlatformsRequirements, json) as T;
			case DetailsModelStores:
				return detailsModelStoresFromJson(data as DetailsModelStores, json) as T;
			case DetailsModelStoresStore:
				return detailsModelStoresStoreFromJson(data as DetailsModelStoresStore, json) as T;
			case DetailsModelDevelopers:
				return detailsModelDevelopersFromJson(data as DetailsModelDevelopers, json) as T;
			case DetailsModelGenres:
				return detailsModelGenresFromJson(data as DetailsModelGenres, json) as T;
			case DetailsModelTags:
				return detailsModelTagsFromJson(data as DetailsModelTags, json) as T;
			case DetailsModelPublishers:
				return detailsModelPublishersFromJson(data as DetailsModelPublishers, json) as T;
			case DetailsModelEsrbRating:
				return detailsModelEsrbRatingFromJson(data as DetailsModelEsrbRating, json) as T;
			case GameModelEntity:
				return gameModelEntityFromJson(data as GameModelEntity, json) as T;
			case GameModelResults:
				return gameModelResultsFromJson(data as GameModelResults, json) as T;
			case GameModelResultsPlatforms:
				return gameModelResultsPlatformsFromJson(data as GameModelResultsPlatforms, json) as T;
			case GameModelResultsPlatformsPlatform:
				return gameModelResultsPlatformsPlatformFromJson(data as GameModelResultsPlatformsPlatform, json) as T;
			case GameModelResultsStores:
				return gameModelResultsStoresFromJson(data as GameModelResultsStores, json) as T;
			case GameModelResultsStoresStore:
				return gameModelResultsStoresStoreFromJson(data as GameModelResultsStoresStore, json) as T;
			case GameModelResultsRatings:
				return gameModelResultsRatingsFromJson(data as GameModelResultsRatings, json) as T;
			case GameModelResultsAddedByStatus:
				return gameModelResultsAddedByStatusFromJson(data as GameModelResultsAddedByStatus, json) as T;
			case GameModelResultsTags:
				return gameModelResultsTagsFromJson(data as GameModelResultsTags, json) as T;
			case GameModelResultsEsrbRating:
				return gameModelResultsEsrbRatingFromJson(data as GameModelResultsEsrbRating, json) as T;
			case GameModelResultsShortScreenshots:
				return gameModelResultsShortScreenshotsFromJson(data as GameModelResultsShortScreenshots, json) as T;
			case GameModelResultsParentPlatforms:
				return gameModelResultsParentPlatformsFromJson(data as GameModelResultsParentPlatforms, json) as T;
			case GameModelResultsParentPlatformsPlatform:
				return gameModelResultsParentPlatformsPlatformFromJson(data as GameModelResultsParentPlatformsPlatform, json) as T;
			case GameModelResultsGenres:
				return gameModelResultsGenresFromJson(data as GameModelResultsGenres, json) as T;
			case ErrorModelEntity:
				return errorModelEntityFromJson(data as ErrorModelEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case DetailsModelEntity:
				return detailsModelEntityToJson(data as DetailsModelEntity);
			case DetailsModelMetacriticPlatforms:
				return detailsModelMetacriticPlatformsToJson(data as DetailsModelMetacriticPlatforms);
			case DetailsModelMetacriticPlatformsPlatform:
				return detailsModelMetacriticPlatformsPlatformToJson(data as DetailsModelMetacriticPlatformsPlatform);
			case DetailsModelRatings:
				return detailsModelRatingsToJson(data as DetailsModelRatings);
			case DetailsModelReactions:
				return detailsModelReactionsToJson(data as DetailsModelReactions);
			case DetailsModelAddedByStatus:
				return detailsModelAddedByStatusToJson(data as DetailsModelAddedByStatus);
			case DetailsModelParentPlatforms:
				return detailsModelParentPlatformsToJson(data as DetailsModelParentPlatforms);
			case DetailsModelParentPlatformsPlatform:
				return detailsModelParentPlatformsPlatformToJson(data as DetailsModelParentPlatformsPlatform);
			case DetailsModelPlatforms:
				return detailsModelPlatformsToJson(data as DetailsModelPlatforms);
			case DetailsModelPlatformsPlatform:
				return detailsModelPlatformsPlatformToJson(data as DetailsModelPlatformsPlatform);
			case DetailsModelPlatformsRequirements:
				return detailsModelPlatformsRequirementsToJson(data as DetailsModelPlatformsRequirements);
			case DetailsModelStores:
				return detailsModelStoresToJson(data as DetailsModelStores);
			case DetailsModelStoresStore:
				return detailsModelStoresStoreToJson(data as DetailsModelStoresStore);
			case DetailsModelDevelopers:
				return detailsModelDevelopersToJson(data as DetailsModelDevelopers);
			case DetailsModelGenres:
				return detailsModelGenresToJson(data as DetailsModelGenres);
			case DetailsModelTags:
				return detailsModelTagsToJson(data as DetailsModelTags);
			case DetailsModelPublishers:
				return detailsModelPublishersToJson(data as DetailsModelPublishers);
			case DetailsModelEsrbRating:
				return detailsModelEsrbRatingToJson(data as DetailsModelEsrbRating);
			case GameModelEntity:
				return gameModelEntityToJson(data as GameModelEntity);
			case GameModelResults:
				return gameModelResultsToJson(data as GameModelResults);
			case GameModelResultsPlatforms:
				return gameModelResultsPlatformsToJson(data as GameModelResultsPlatforms);
			case GameModelResultsPlatformsPlatform:
				return gameModelResultsPlatformsPlatformToJson(data as GameModelResultsPlatformsPlatform);
			case GameModelResultsStores:
				return gameModelResultsStoresToJson(data as GameModelResultsStores);
			case GameModelResultsStoresStore:
				return gameModelResultsStoresStoreToJson(data as GameModelResultsStoresStore);
			case GameModelResultsRatings:
				return gameModelResultsRatingsToJson(data as GameModelResultsRatings);
			case GameModelResultsAddedByStatus:
				return gameModelResultsAddedByStatusToJson(data as GameModelResultsAddedByStatus);
			case GameModelResultsTags:
				return gameModelResultsTagsToJson(data as GameModelResultsTags);
			case GameModelResultsEsrbRating:
				return gameModelResultsEsrbRatingToJson(data as GameModelResultsEsrbRating);
			case GameModelResultsShortScreenshots:
				return gameModelResultsShortScreenshotsToJson(data as GameModelResultsShortScreenshots);
			case GameModelResultsParentPlatforms:
				return gameModelResultsParentPlatformsToJson(data as GameModelResultsParentPlatforms);
			case GameModelResultsParentPlatformsPlatform:
				return gameModelResultsParentPlatformsPlatformToJson(data as GameModelResultsParentPlatformsPlatform);
			case GameModelResultsGenres:
				return gameModelResultsGenresToJson(data as GameModelResultsGenres);
			case ErrorModelEntity:
				return errorModelEntityToJson(data as ErrorModelEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (DetailsModelEntity).toString()){
			return DetailsModelEntity().fromJson(json);
		}
		if(type == (DetailsModelMetacriticPlatforms).toString()){
			return DetailsModelMetacriticPlatforms().fromJson(json);
		}
		if(type == (DetailsModelMetacriticPlatformsPlatform).toString()){
			return DetailsModelMetacriticPlatformsPlatform().fromJson(json);
		}
		if(type == (DetailsModelRatings).toString()){
			return DetailsModelRatings().fromJson(json);
		}
		if(type == (DetailsModelReactions).toString()){
			return DetailsModelReactions().fromJson(json);
		}
		if(type == (DetailsModelAddedByStatus).toString()){
			return DetailsModelAddedByStatus().fromJson(json);
		}
		if(type == (DetailsModelParentPlatforms).toString()){
			return DetailsModelParentPlatforms().fromJson(json);
		}
		if(type == (DetailsModelParentPlatformsPlatform).toString()){
			return DetailsModelParentPlatformsPlatform().fromJson(json);
		}
		if(type == (DetailsModelPlatforms).toString()){
			return DetailsModelPlatforms().fromJson(json);
		}
		if(type == (DetailsModelPlatformsPlatform).toString()){
			return DetailsModelPlatformsPlatform().fromJson(json);
		}
		if(type == (DetailsModelPlatformsRequirements).toString()){
			return DetailsModelPlatformsRequirements().fromJson(json);
		}
		if(type == (DetailsModelStores).toString()){
			return DetailsModelStores().fromJson(json);
		}
		if(type == (DetailsModelStoresStore).toString()){
			return DetailsModelStoresStore().fromJson(json);
		}
		if(type == (DetailsModelDevelopers).toString()){
			return DetailsModelDevelopers().fromJson(json);
		}
		if(type == (DetailsModelGenres).toString()){
			return DetailsModelGenres().fromJson(json);
		}
		if(type == (DetailsModelTags).toString()){
			return DetailsModelTags().fromJson(json);
		}
		if(type == (DetailsModelPublishers).toString()){
			return DetailsModelPublishers().fromJson(json);
		}
		if(type == (DetailsModelEsrbRating).toString()){
			return DetailsModelEsrbRating().fromJson(json);
		}
		if(type == (GameModelEntity).toString()){
			return GameModelEntity().fromJson(json);
		}
		if(type == (GameModelResults).toString()){
			return GameModelResults().fromJson(json);
		}
		if(type == (GameModelResultsPlatforms).toString()){
			return GameModelResultsPlatforms().fromJson(json);
		}
		if(type == (GameModelResultsPlatformsPlatform).toString()){
			return GameModelResultsPlatformsPlatform().fromJson(json);
		}
		if(type == (GameModelResultsStores).toString()){
			return GameModelResultsStores().fromJson(json);
		}
		if(type == (GameModelResultsStoresStore).toString()){
			return GameModelResultsStoresStore().fromJson(json);
		}
		if(type == (GameModelResultsRatings).toString()){
			return GameModelResultsRatings().fromJson(json);
		}
		if(type == (GameModelResultsAddedByStatus).toString()){
			return GameModelResultsAddedByStatus().fromJson(json);
		}
		if(type == (GameModelResultsTags).toString()){
			return GameModelResultsTags().fromJson(json);
		}
		if(type == (GameModelResultsEsrbRating).toString()){
			return GameModelResultsEsrbRating().fromJson(json);
		}
		if(type == (GameModelResultsShortScreenshots).toString()){
			return GameModelResultsShortScreenshots().fromJson(json);
		}
		if(type == (GameModelResultsParentPlatforms).toString()){
			return GameModelResultsParentPlatforms().fromJson(json);
		}
		if(type == (GameModelResultsParentPlatformsPlatform).toString()){
			return GameModelResultsParentPlatformsPlatform().fromJson(json);
		}
		if(type == (GameModelResultsGenres).toString()){
			return GameModelResultsGenres().fromJson(json);
		}
		if(type == (ErrorModelEntity).toString()){
			return ErrorModelEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<DetailsModelEntity>[] is M){
			return data.map<DetailsModelEntity>((e) => DetailsModelEntity().fromJson(e)).toList() as M;
		}
		if(<DetailsModelMetacriticPlatforms>[] is M){
			return data.map<DetailsModelMetacriticPlatforms>((e) => DetailsModelMetacriticPlatforms().fromJson(e)).toList() as M;
		}
		if(<DetailsModelMetacriticPlatformsPlatform>[] is M){
			return data.map<DetailsModelMetacriticPlatformsPlatform>((e) => DetailsModelMetacriticPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<DetailsModelRatings>[] is M){
			return data.map<DetailsModelRatings>((e) => DetailsModelRatings().fromJson(e)).toList() as M;
		}
		if(<DetailsModelReactions>[] is M){
			return data.map<DetailsModelReactions>((e) => DetailsModelReactions().fromJson(e)).toList() as M;
		}
		if(<DetailsModelAddedByStatus>[] is M){
			return data.map<DetailsModelAddedByStatus>((e) => DetailsModelAddedByStatus().fromJson(e)).toList() as M;
		}
		if(<DetailsModelParentPlatforms>[] is M){
			return data.map<DetailsModelParentPlatforms>((e) => DetailsModelParentPlatforms().fromJson(e)).toList() as M;
		}
		if(<DetailsModelParentPlatformsPlatform>[] is M){
			return data.map<DetailsModelParentPlatformsPlatform>((e) => DetailsModelParentPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<DetailsModelPlatforms>[] is M){
			return data.map<DetailsModelPlatforms>((e) => DetailsModelPlatforms().fromJson(e)).toList() as M;
		}
		if(<DetailsModelPlatformsPlatform>[] is M){
			return data.map<DetailsModelPlatformsPlatform>((e) => DetailsModelPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<DetailsModelPlatformsRequirements>[] is M){
			return data.map<DetailsModelPlatformsRequirements>((e) => DetailsModelPlatformsRequirements().fromJson(e)).toList() as M;
		}
		if(<DetailsModelStores>[] is M){
			return data.map<DetailsModelStores>((e) => DetailsModelStores().fromJson(e)).toList() as M;
		}
		if(<DetailsModelStoresStore>[] is M){
			return data.map<DetailsModelStoresStore>((e) => DetailsModelStoresStore().fromJson(e)).toList() as M;
		}
		if(<DetailsModelDevelopers>[] is M){
			return data.map<DetailsModelDevelopers>((e) => DetailsModelDevelopers().fromJson(e)).toList() as M;
		}
		if(<DetailsModelGenres>[] is M){
			return data.map<DetailsModelGenres>((e) => DetailsModelGenres().fromJson(e)).toList() as M;
		}
		if(<DetailsModelTags>[] is M){
			return data.map<DetailsModelTags>((e) => DetailsModelTags().fromJson(e)).toList() as M;
		}
		if(<DetailsModelPublishers>[] is M){
			return data.map<DetailsModelPublishers>((e) => DetailsModelPublishers().fromJson(e)).toList() as M;
		}
		if(<DetailsModelEsrbRating>[] is M){
			return data.map<DetailsModelEsrbRating>((e) => DetailsModelEsrbRating().fromJson(e)).toList() as M;
		}
		if(<GameModelEntity>[] is M){
			return data.map<GameModelEntity>((e) => GameModelEntity().fromJson(e)).toList() as M;
		}
		if(<GameModelResults>[] is M){
			return data.map<GameModelResults>((e) => GameModelResults().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsPlatforms>[] is M){
			return data.map<GameModelResultsPlatforms>((e) => GameModelResultsPlatforms().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsPlatformsPlatform>[] is M){
			return data.map<GameModelResultsPlatformsPlatform>((e) => GameModelResultsPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsStores>[] is M){
			return data.map<GameModelResultsStores>((e) => GameModelResultsStores().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsStoresStore>[] is M){
			return data.map<GameModelResultsStoresStore>((e) => GameModelResultsStoresStore().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsRatings>[] is M){
			return data.map<GameModelResultsRatings>((e) => GameModelResultsRatings().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsAddedByStatus>[] is M){
			return data.map<GameModelResultsAddedByStatus>((e) => GameModelResultsAddedByStatus().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsTags>[] is M){
			return data.map<GameModelResultsTags>((e) => GameModelResultsTags().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsEsrbRating>[] is M){
			return data.map<GameModelResultsEsrbRating>((e) => GameModelResultsEsrbRating().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsShortScreenshots>[] is M){
			return data.map<GameModelResultsShortScreenshots>((e) => GameModelResultsShortScreenshots().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsParentPlatforms>[] is M){
			return data.map<GameModelResultsParentPlatforms>((e) => GameModelResultsParentPlatforms().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsParentPlatformsPlatform>[] is M){
			return data.map<GameModelResultsParentPlatformsPlatform>((e) => GameModelResultsParentPlatformsPlatform().fromJson(e)).toList() as M;
		}
		if(<GameModelResultsGenres>[] is M){
			return data.map<GameModelResultsGenres>((e) => GameModelResultsGenres().fromJson(e)).toList() as M;
		}
		if(<ErrorModelEntity>[] is M){
			return data.map<ErrorModelEntity>((e) => ErrorModelEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}